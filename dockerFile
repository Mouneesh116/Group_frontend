# ---- build stage ----
FROM node:22-alpine AS build
WORKDIR /app

# Install dependencies using only package manifests for better caching
COPY package.json package-lock.json* yarn.lock* ./

# Use npm CI if lockfile exists, else npm install (keeps small image)
RUN if [ -f package-lock.json ]; then npm ci --no-audit --no-fund; else npm install --no-audit --no-fund; fi

# Copy source and build
COPY . .

# Allow overriding the build command / output directory via build args.
# - BUILD_CMD: command to run the build (default supports CRA and Vite)
# - DIST_DIR: where the static files appear after build (default 'dist' for Vite)
ARG BUILD_CMD="npm run build"
ARG DIST_DIR="dist"
ENV DIST_DIR=${DIST_DIR}

RUN set -eux; \
    echo "Running build: ${BUILD_CMD}"; \
    ${BUILD_CMD}

# ---- runtime stage ----
FROM nginx:stable-alpine AS runtime

# Remove default nginx html (safety)
RUN rm -rf /usr/share/nginx/html/*

# Copy a simple nginx config (SPA fallback, caching)
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built static assets from build stage (allows DIST_DIR to be set at build time)
ARG DIST_DIR="dist"
COPY --from=build --chown=nginx:nginx /app/${DIST_DIR} /usr/share/nginx/html

# Expose port
EXPOSE 80

# Run as non-privileged user (nginx image uses "nginx")
STOPSIGNAL SIGTERM
CMD ["nginx", "-g", "daemon off;"]
